#include <iostream>
#include <exception>
#include <string>

	using namespace std;

// Templates


// Task 1

template <class T> 
T maxTemp(T n1, T n2) {
	return n1 > n2 ? n1 : n2;
}


// Task 2

template <class T> 
void swapTemp(T & n1, T & n2) {
	T temp = n1;
	n1 = n2;
	n2 = temp;
}

// Task 3	

template <class T> 
class DivisionByZeroInCalculator;

template <class T>
class Calculator {
	T num1;
	T num2;
public:
	Calculator(T num1, T num2) {
		this->num1 = num1;
		this->num2 = num2;
		if (num2 == 0) {
			cout << "WARNING : YOU'LL NOT BE ABLE TO DIVIDE " << num1 << " by zero" << endl;
		}
	}
	void add() {
		cout << num1 << " + " << num2 << " = " << (num1 + num2) << endl;
	}
	void subtract() {
		cout << num1 << " - " << num2 << " = " << (num1 - num2) << endl;
	}
	void multiply() {
		cout << num1 << " * " << num2 << " = " << (num1 * num2) << endl;
	}
	void divide() {
		if (num2 == 0)
			throw DivisionByZeroInCalculator<T>(num1);

		cout << num1 << " / " << num2 << " = " << (num1 / num2) << endl;
	}
	T getNum1() {
		return num1;
	}
};


template <class T>
class DivisionByZeroInCalculator : public exception {
	int num1;
public:

	DivisionByZeroInCalculator(T num1) {
		this->num1 = num1;
	}

	const char* what() const throw() {
		cout << "Can't divide " << num1;
		return " by zero";
	}
	T getNum1() {
		return num1;
	}
};



// Abstraction - Polymorphism

// Task 4

class Vehicle {

protected:

	string vehicleModel;
	string registrationNumber;
	int vehicleSpeed;
	double fuelCapacity;
	double fuelConsumption;


	Vehicle(string vm, string rn, int vs, double fCap, double fuelCons) {
		vehicleModel = vm;
		registrationNumber = rn;
		vehicleSpeed = vs;
		fuelCapacity = fCap;
		fuelConsumption = fuelCons;
	}


public:

	double fuelNeeded(double distance) { 	// Takes distance in kilometers
		return fuelConsumption * distance;
	}
	double distanceConvered(double time) {	 // Returns distance in kilometers
		return vehicleSpeed * time;
	}

	virtual void display() = 0;
};



class Truck : public Vehicle {

	double cargoWeightLimit;

public:

	Truck(string vm, string rn, int vs, double fCap, double fuelCons, double weightLimit) : Vehicle(vm, rn, vs, fCap, fuelCons) {
		cargoWeightLimit = weightLimit;
	}

	// Setters
	void setVehicleModel(string vm) {
		vehicleModel = vm;
	}
	void setRegistrationNumber(string rn) {
		registrationNumber = rn;
	}
	void setVehicleSpeed(int vs) {
		vehicleSpeed = vs;
	}
	void setFuelCapacity(double fCap) {
		fuelCapacity = fCap;
	}
	void setFuelConsumption(double fuelCons) {
		fuelConsumption = fuelCons;
	}
	void setCargoWeightLimit(double weightLimit) {
		cargoWeightLimit = weightLimit;
	}

	// Getters
	string getVehicleModel() {
		return vehicleModel;
	}
	string getRegistrationNumber() {
		return registrationNumber;
	}
	int getVehicleSpeed() {
		return vehicleSpeed;
	}
	double getFuelCapacity() {
		return fuelCapacity;
	}
	double getFuelConsumption() {
		return fuelConsumption;
	}
	double getCargoWeightLimit() {
		return cargoWeightLimit;
	}

	void display() {
		cout << "Model : " << vehicleModel << "\nRegistration number : " << registrationNumber << "\nSpeed : " << vehicleSpeed << " (km/h)"
			<< "\nFuel capacity : " << fuelCapacity << (fuelCapacity > 1 ? " liters" : " liter") << "\nFuel consumption : " << fuelConsumption << " (liter/km)" << endl;

		cout << "Cargo's weight limit : " << getCargoWeightLimit() << (getCargoWeightLimit() > 1 ? " kilograms" : "kilogram") << endl;
	}
};


class Bus : public Vehicle {

	int numOfPassengers;

public:

	Bus(string vm, string rn, int vs, double fCap, double fuelCons, int passengersNum) : Vehicle(vm, rn, vs, fCap, fuelCons) {
		numOfPassengers = passengersNum;
	}

	// Setters
	void setVehicleModel(string vm) {
		vehicleModel = vm;
	}
	void setRegistrationNumber(string rn) {
		registrationNumber = rn;
	}
	void setVehicleSpeed(int vs) {
		vehicleSpeed = vs;
	}
	void setFuelCapacity(double fCap) {
		fuelCapacity = fCap;
	}
	void setFuelConsumption(double fuelCons) {
		fuelConsumption = fuelCons;
	}
	void setNumberOfPassengers(int passengersNum) {
		numOfPassengers = passengersNum;
	}

	// Getters
	string getVehicleModel() {
		return vehicleModel;
	}
	string getRegistrationNumber() {
		return registrationNumber;
	}
	int getVehicleSpeed() {
		return vehicleSpeed;
	}
	double getFuelCapacity() {
		return fuelCapacity;
	}
	double getFuelConsumption() {
		return fuelConsumption;
	}
	int getNumberOfPassengers() {
		return numOfPassengers;
	}

	void display() {
		cout << "Model : " << vehicleModel << "\nRegistration number : " << registrationNumber << "\nSpeed : " << vehicleSpeed << " (km/h)"
			<< "\nFuel capacity : " << fuelCapacity << (fuelCapacity > 1 ? " liters" : " liter") << "\nFuel consumption : " << fuelConsumption << " (liter/km)" << endl;
		cout << "The number of passengers : " << getNumberOfPassengers() << (getNumberOfPassengers() > 1 ? " passengers" : " passenger") << endl;
	}
};




// Exception Handling

// Task 5

class CantDivideByZero : public exception {

	int x;

public:

	CantDivideByZero(int x) {
		this->x = x;
	}

	const char* what() const throw() {
		cout << "Can't divide " << x;
		return " by zero";


	}
};

class DivisorCantBeLessThanZero : public exception {
	int y;

public:
	DivisorCantBeLessThanZero(int y) {
		this->y = y;
	}
	const char* what() const throw() {
		cout << y;
		return " can't be less than zero";
	}
};

int divide(int x, int y) {
	if (y == 0)
		throw CantDivideByZero(x);
	else if (y < 0)
		throw DivisorCantBeLessThanZero(y);
	return x / y;
}


int main() {


	// Task 1 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	/*
	int n1, n2;

	cout << "Enter 2 integers : "; cin >> n1 >> n2;
	cout << "The maximum integer is " << maxTemp(n1, n2) << endl;


	float fn1, fn2;
	cout << "Enter 2 floating point numbers : "; cin >> fn1 >> fn2;
	cout << "The maximum floating point number is " << maxTemp(fn1, fn2) << endl;
	*/



	

	// Task 2 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	/*	int n1,n2;

		cout << "Enter 2 integers : "; cin >> n1 >> n2;
		cout << "Before the swap\n\nn1 is " << n1 << "\n\nn2 is " << n2 << endl << endl;
		swapTemp(n1,n2);
		cout << "After the swap\n\nn1 is " << n1 << "\n\nn2 is " << n2 << endl << endl;


		float fn1,fn2;

		cout << "Enter 2 floating point numbers : "; cin >> fn1 >> fn2;
		cout << "Before the swap\n\nn1 is " << fn1 << "\n\nn2 is " << fn2 << endl << endl;
		swapTemp(fn1,fn2);
		cout << "After the swap\n\nn1 is " << fn1 << "\n\nn2 is " << fn2;

	*/

	

	// Task 3 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


	/*	try{
			Calculator<int> c1(5,10);  // 2 integers

			c1.add();
			c1.subtract();
			c1.multiply();
			c1.divide();
		}
		catch(DivisionByZeroInCalculator<int>& ex){
			cout << ex.what();
		}

		try{

			Calculator<float> c2(5.0,0);  // 2 floating point numbers

			c2.add();
			c2.subtract();
			c2.multiply();
			c2.divide();
		}
		catch(DivisionByZeroInCalculator<float>& ex){
			cout << ex.what();
		}


		*/



		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		// Task 4 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


		/*	Vehicle* v = new Truck("Truck","165415",50,60,1,500);

			v->display();


			cout << endl << endl;

			v = new Bus("Bus","589247",80,100,5,100);

			v->display();
		*/
}
